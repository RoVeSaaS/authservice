// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tenants.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTenant = `-- name: CreateTenant :one
INSERT INTO tenants (
  tenant_id,
  tenant_name,
  tenant_owner,
  is_active,
  tenant_city,
  tenant_state,
  tenant_country
)
VALUES (
    $1,$2,$3,$4,$5,$6,$7
) RETURNING tenant_id, tenant_name, tenant_owner, is_active, tenant_city, tenant_state, tenant_country
`

type CreateTenantParams struct {
	TenantID      uuid.UUID      `json:"tenant_id"`
	TenantName    sql.NullString `json:"tenant_name"`
	TenantOwner   sql.NullString `json:"tenant_owner"`
	IsActive      sql.NullBool   `json:"is_active"`
	TenantCity    sql.NullString `json:"tenant_city"`
	TenantState   sql.NullString `json:"tenant_state"`
	TenantCountry sql.NullString `json:"tenant_country"`
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (Tenant, error) {
	row := q.queryRow(ctx, q.createTenantStmt, createTenant,
		arg.TenantID,
		arg.TenantName,
		arg.TenantOwner,
		arg.IsActive,
		arg.TenantCity,
		arg.TenantState,
		arg.TenantCountry,
	)
	var i Tenant
	err := row.Scan(
		&i.TenantID,
		&i.TenantName,
		&i.TenantOwner,
		&i.IsActive,
		&i.TenantCity,
		&i.TenantState,
		&i.TenantCountry,
	)
	return i, err
}

const deleteTenantById = `-- name: DeleteTenantById :exec
delete from tenants 
where tenant_id = $1
`

func (q *Queries) DeleteTenantById(ctx context.Context, tenantID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteTenantByIdStmt, deleteTenantById, tenantID)
	return err
}

const getTenantById = `-- name: GetTenantById :one
select tenant_id, tenant_name, tenant_owner, is_active, tenant_city, tenant_state, tenant_country from tenants
where tenant_id = $1 LIMIT 1
`

func (q *Queries) GetTenantById(ctx context.Context, tenantID uuid.UUID) (Tenant, error) {
	row := q.queryRow(ctx, q.getTenantByIdStmt, getTenantById, tenantID)
	var i Tenant
	err := row.Scan(
		&i.TenantID,
		&i.TenantName,
		&i.TenantOwner,
		&i.IsActive,
		&i.TenantCity,
		&i.TenantState,
		&i.TenantCountry,
	)
	return i, err
}

const getTenants = `-- name: GetTenants :many
select tenant_id, tenant_name, tenant_owner, is_active, tenant_city, tenant_state, tenant_country from tenants
order by tenant_id
LIMIT $1
OFFSET $2
`

type GetTenantsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetTenants(ctx context.Context, arg GetTenantsParams) ([]Tenant, error) {
	rows, err := q.query(ctx, q.getTenantsStmt, getTenants, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tenant{}
	for rows.Next() {
		var i Tenant
		if err := rows.Scan(
			&i.TenantID,
			&i.TenantName,
			&i.TenantOwner,
			&i.IsActive,
			&i.TenantCity,
			&i.TenantState,
			&i.TenantCountry,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTenantStatus = `-- name: UpdateTenantStatus :one
UPDATE tenants 
SET
is_active = coalesce($1, is_active)
WHERE
tenant_id = $2
RETURNING tenant_id, tenant_name, tenant_owner, is_active, tenant_city, tenant_state, tenant_country
`

type UpdateTenantStatusParams struct {
	IsActive sql.NullBool `json:"is_active"`
	TenantID uuid.UUID    `json:"tenant_id"`
}

func (q *Queries) UpdateTenantStatus(ctx context.Context, arg UpdateTenantStatusParams) (Tenant, error) {
	row := q.queryRow(ctx, q.updateTenantStatusStmt, updateTenantStatus, arg.IsActive, arg.TenantID)
	var i Tenant
	err := row.Scan(
		&i.TenantID,
		&i.TenantName,
		&i.TenantOwner,
		&i.IsActive,
		&i.TenantCity,
		&i.TenantState,
		&i.TenantCountry,
	)
	return i, err
}
