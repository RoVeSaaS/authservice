// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.assignGroupRoleStmt, err = db.PrepareContext(ctx, assignGroupRole); err != nil {
		return nil, fmt.Errorf("error preparing query AssignGroupRole: %w", err)
	}
	if q.assignUserGroupStmt, err = db.PrepareContext(ctx, assignUserGroup); err != nil {
		return nil, fmt.Errorf("error preparing query AssignUserGroup: %w", err)
	}
	if q.assignUserRoleStmt, err = db.PrepareContext(ctx, assignUserRole); err != nil {
		return nil, fmt.Errorf("error preparing query AssignUserRole: %w", err)
	}
	if q.createGroupStmt, err = db.PrepareContext(ctx, createGroup); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGroup: %w", err)
	}
	if q.createRoleStmt, err = db.PrepareContext(ctx, createRole); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRole: %w", err)
	}
	if q.createTenantStmt, err = db.PrepareContext(ctx, createTenant); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTenant: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteGroupByIdStmt, err = db.PrepareContext(ctx, deleteGroupById); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGroupById: %w", err)
	}
	if q.deleteRoleByIdStmt, err = db.PrepareContext(ctx, deleteRoleById); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRoleById: %w", err)
	}
	if q.deleteTenantByIdStmt, err = db.PrepareContext(ctx, deleteTenantById); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTenantById: %w", err)
	}
	if q.getGroupByIdStmt, err = db.PrepareContext(ctx, getGroupById); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupById: %w", err)
	}
	if q.getGroupsStmt, err = db.PrepareContext(ctx, getGroups); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroups: %w", err)
	}
	if q.getRoleByIdStmt, err = db.PrepareContext(ctx, getRoleById); err != nil {
		return nil, fmt.Errorf("error preparing query GetRoleById: %w", err)
	}
	if q.getRolesStmt, err = db.PrepareContext(ctx, getRoles); err != nil {
		return nil, fmt.Errorf("error preparing query GetRoles: %w", err)
	}
	if q.getTenantByIdStmt, err = db.PrepareContext(ctx, getTenantById); err != nil {
		return nil, fmt.Errorf("error preparing query GetTenantById: %w", err)
	}
	if q.getTenantsStmt, err = db.PrepareContext(ctx, getTenants); err != nil {
		return nil, fmt.Errorf("error preparing query GetTenants: %w", err)
	}
	if q.getUserByIdStmt, err = db.PrepareContext(ctx, getUserById); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserById: %w", err)
	}
	if q.getUsersStmt, err = db.PrepareContext(ctx, getUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsers: %w", err)
	}
	if q.updateTenantStatusStmt, err = db.PrepareContext(ctx, updateTenantStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTenantStatus: %w", err)
	}
	if q.updateUserStatusStmt, err = db.PrepareContext(ctx, updateUserStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserStatus: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.assignGroupRoleStmt != nil {
		if cerr := q.assignGroupRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing assignGroupRoleStmt: %w", cerr)
		}
	}
	if q.assignUserGroupStmt != nil {
		if cerr := q.assignUserGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing assignUserGroupStmt: %w", cerr)
		}
	}
	if q.assignUserRoleStmt != nil {
		if cerr := q.assignUserRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing assignUserRoleStmt: %w", cerr)
		}
	}
	if q.createGroupStmt != nil {
		if cerr := q.createGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGroupStmt: %w", cerr)
		}
	}
	if q.createRoleStmt != nil {
		if cerr := q.createRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRoleStmt: %w", cerr)
		}
	}
	if q.createTenantStmt != nil {
		if cerr := q.createTenantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTenantStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteGroupByIdStmt != nil {
		if cerr := q.deleteGroupByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGroupByIdStmt: %w", cerr)
		}
	}
	if q.deleteRoleByIdStmt != nil {
		if cerr := q.deleteRoleByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRoleByIdStmt: %w", cerr)
		}
	}
	if q.deleteTenantByIdStmt != nil {
		if cerr := q.deleteTenantByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTenantByIdStmt: %w", cerr)
		}
	}
	if q.getGroupByIdStmt != nil {
		if cerr := q.getGroupByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupByIdStmt: %w", cerr)
		}
	}
	if q.getGroupsStmt != nil {
		if cerr := q.getGroupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupsStmt: %w", cerr)
		}
	}
	if q.getRoleByIdStmt != nil {
		if cerr := q.getRoleByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRoleByIdStmt: %w", cerr)
		}
	}
	if q.getRolesStmt != nil {
		if cerr := q.getRolesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRolesStmt: %w", cerr)
		}
	}
	if q.getTenantByIdStmt != nil {
		if cerr := q.getTenantByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTenantByIdStmt: %w", cerr)
		}
	}
	if q.getTenantsStmt != nil {
		if cerr := q.getTenantsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTenantsStmt: %w", cerr)
		}
	}
	if q.getUserByIdStmt != nil {
		if cerr := q.getUserByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIdStmt: %w", cerr)
		}
	}
	if q.getUsersStmt != nil {
		if cerr := q.getUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersStmt: %w", cerr)
		}
	}
	if q.updateTenantStatusStmt != nil {
		if cerr := q.updateTenantStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTenantStatusStmt: %w", cerr)
		}
	}
	if q.updateUserStatusStmt != nil {
		if cerr := q.updateUserStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStatusStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                     DBTX
	tx                     *sql.Tx
	assignGroupRoleStmt    *sql.Stmt
	assignUserGroupStmt    *sql.Stmt
	assignUserRoleStmt     *sql.Stmt
	createGroupStmt        *sql.Stmt
	createRoleStmt         *sql.Stmt
	createTenantStmt       *sql.Stmt
	createUserStmt         *sql.Stmt
	deleteGroupByIdStmt    *sql.Stmt
	deleteRoleByIdStmt     *sql.Stmt
	deleteTenantByIdStmt   *sql.Stmt
	getGroupByIdStmt       *sql.Stmt
	getGroupsStmt          *sql.Stmt
	getRoleByIdStmt        *sql.Stmt
	getRolesStmt           *sql.Stmt
	getTenantByIdStmt      *sql.Stmt
	getTenantsStmt         *sql.Stmt
	getUserByIdStmt        *sql.Stmt
	getUsersStmt           *sql.Stmt
	updateTenantStatusStmt *sql.Stmt
	updateUserStatusStmt   *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                     tx,
		tx:                     tx,
		assignGroupRoleStmt:    q.assignGroupRoleStmt,
		assignUserGroupStmt:    q.assignUserGroupStmt,
		assignUserRoleStmt:     q.assignUserRoleStmt,
		createGroupStmt:        q.createGroupStmt,
		createRoleStmt:         q.createRoleStmt,
		createTenantStmt:       q.createTenantStmt,
		createUserStmt:         q.createUserStmt,
		deleteGroupByIdStmt:    q.deleteGroupByIdStmt,
		deleteRoleByIdStmt:     q.deleteRoleByIdStmt,
		deleteTenantByIdStmt:   q.deleteTenantByIdStmt,
		getGroupByIdStmt:       q.getGroupByIdStmt,
		getGroupsStmt:          q.getGroupsStmt,
		getRoleByIdStmt:        q.getRoleByIdStmt,
		getRolesStmt:           q.getRolesStmt,
		getTenantByIdStmt:      q.getTenantByIdStmt,
		getTenantsStmt:         q.getTenantsStmt,
		getUserByIdStmt:        q.getUserByIdStmt,
		getUsersStmt:           q.getUsersStmt,
		updateTenantStatusStmt: q.updateTenantStatusStmt,
		updateUserStatusStmt:   q.updateUserStatusStmt,
	}
}
