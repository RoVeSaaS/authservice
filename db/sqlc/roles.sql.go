// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: roles.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (
role_id,
role_name,
tenant_id
) VALUES (
$1, $2, $3
) RETURNING role_id, role_name, tenant_id
`

type CreateRoleParams struct {
	RoleID   uuid.UUID      `json:"role_id"`
	RoleName sql.NullString `json:"role_name"`
	TenantID sql.NullString `json:"tenant_id"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.queryRow(ctx, q.createRoleStmt, createRole, arg.RoleID, arg.RoleName, arg.TenantID)
	var i Role
	err := row.Scan(&i.RoleID, &i.RoleName, &i.TenantID)
	return i, err
}

const deleteRoleById = `-- name: DeleteRoleById :exec
delete from roles 
where role_id = $1
`

func (q *Queries) DeleteRoleById(ctx context.Context, roleID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteRoleByIdStmt, deleteRoleById, roleID)
	return err
}

const getRoleById = `-- name: GetRoleById :one
select role_id, role_name, tenant_id from roles
where role_id = $1 LIMIT 1
`

func (q *Queries) GetRoleById(ctx context.Context, roleID uuid.UUID) (Role, error) {
	row := q.queryRow(ctx, q.getRoleByIdStmt, getRoleById, roleID)
	var i Role
	err := row.Scan(&i.RoleID, &i.RoleName, &i.TenantID)
	return i, err
}

const getRoles = `-- name: GetRoles :many
select role_id, role_name, tenant_id from roles
where
tenant_id = $3
order by role_id
LIMIT $1
OFFSET $2
`

type GetRolesParams struct {
	Limit    int32          `json:"limit"`
	Offset   int32          `json:"offset"`
	TenantID sql.NullString `json:"tenant_id"`
}

func (q *Queries) GetRoles(ctx context.Context, arg GetRolesParams) ([]Role, error) {
	rows, err := q.query(ctx, q.getRolesStmt, getRoles, arg.Limit, arg.Offset, arg.TenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.RoleID, &i.RoleName, &i.TenantID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
