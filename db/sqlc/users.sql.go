// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const assignGroupRole = `-- name: AssignGroupRole :one
insert into role_groups (
  group_id ,
  role_id ,
  tenant_id
) values (
    $1, $2, $3
) RETURNING role_id, group_id, tenant_id
`

type AssignGroupRoleParams struct {
	GroupID  uuid.NullUUID `json:"group_id"`
	RoleID   uuid.NullUUID `json:"role_id"`
	TenantID uuid.NullUUID `json:"tenant_id"`
}

func (q *Queries) AssignGroupRole(ctx context.Context, arg AssignGroupRoleParams) (RoleGroup, error) {
	row := q.queryRow(ctx, q.assignGroupRoleStmt, assignGroupRole, arg.GroupID, arg.RoleID, arg.TenantID)
	var i RoleGroup
	err := row.Scan(&i.RoleID, &i.GroupID, &i.TenantID)
	return i, err
}

const assignUserGroup = `-- name: AssignUserGroup :one
insert into user_groups (
  user_id ,
  group_id ,
  tenant_id
) values (
    $1, $2, $3
) RETURNING user_id, group_id, tenant_id
`

type AssignUserGroupParams struct {
	UserID   uuid.NullUUID `json:"user_id"`
	GroupID  uuid.NullUUID `json:"group_id"`
	TenantID uuid.NullUUID `json:"tenant_id"`
}

func (q *Queries) AssignUserGroup(ctx context.Context, arg AssignUserGroupParams) (UserGroup, error) {
	row := q.queryRow(ctx, q.assignUserGroupStmt, assignUserGroup, arg.UserID, arg.GroupID, arg.TenantID)
	var i UserGroup
	err := row.Scan(&i.UserID, &i.GroupID, &i.TenantID)
	return i, err
}

const assignUserRole = `-- name: AssignUserRole :one
insert into user_roles (
  user_id ,
  role_id ,
  tenant_id
) values (
    $1, $2, $3
) RETURNING user_id, role_id, tenant_id
`

type AssignUserRoleParams struct {
	UserID   uuid.NullUUID `json:"user_id"`
	RoleID   uuid.NullUUID `json:"role_id"`
	TenantID uuid.NullUUID `json:"tenant_id"`
}

func (q *Queries) AssignUserRole(ctx context.Context, arg AssignUserRoleParams) (UserRole, error) {
	row := q.queryRow(ctx, q.assignUserRoleStmt, assignUserRole, arg.UserID, arg.RoleID, arg.TenantID)
	var i UserRole
	err := row.Scan(&i.UserID, &i.RoleID, &i.TenantID)
	return i, err
}

const createUser = `-- name: CreateUser :one
insert into users (
  user_id,
  tenant_id,
  user_name,
  user_email,
  first_name,
  last_name,
  password,
  is_active
) values (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING user_id, tenant_id, user_name, user_email, first_name, last_name, password, is_active
`

type CreateUserParams struct {
	UserID    uuid.UUID      `json:"user_id"`
	TenantID  string         `json:"tenant_id"`
	UserName  sql.NullString `json:"user_name"`
	UserEmail sql.NullString `json:"user_email"`
	FirstName sql.NullString `json:"first_name"`
	LastName  sql.NullString `json:"last_name"`
	Password  sql.NullString `json:"password"`
	IsActive  sql.NullBool   `json:"is_active"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.UserID,
		arg.TenantID,
		arg.UserName,
		arg.UserEmail,
		arg.FirstName,
		arg.LastName,
		arg.Password,
		arg.IsActive,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.TenantID,
		&i.UserName,
		&i.UserEmail,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.IsActive,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
select user_id, tenant_id, user_name, user_email, first_name, last_name, password, is_active from users
where
tenant_id = $2 AND
user_id = $1
LIMIT 1
`

type GetUserByIdParams struct {
	UserID   uuid.UUID `json:"user_id"`
	TenantID string    `json:"tenant_id"`
}

func (q *Queries) GetUserById(ctx context.Context, arg GetUserByIdParams) (User, error) {
	row := q.queryRow(ctx, q.getUserByIdStmt, getUserById, arg.UserID, arg.TenantID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.TenantID,
		&i.UserName,
		&i.UserEmail,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.IsActive,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
select user_id, tenant_id, user_name, user_email, first_name, last_name, password, is_active from users
where
tenant_id = $3
order by user_id
LIMIT $1
OFFSET $2
`

type GetUsersParams struct {
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
	TenantID string `json:"tenant_id"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.query(ctx, q.getUsersStmt, getUsers, arg.Limit, arg.Offset, arg.TenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.TenantID,
			&i.UserName,
			&i.UserEmail,
			&i.FirstName,
			&i.LastName,
			&i.Password,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserStatus = `-- name: UpdateUserStatus :one
UPDATE users 
SET
is_active = coalesce($1, is_active)
WHERE
tenant_id = $2 AND
user_id = $3
RETURNING user_id, tenant_id, user_name, user_email, first_name, last_name, password, is_active
`

type UpdateUserStatusParams struct {
	IsActive sql.NullBool `json:"is_active"`
	TenantID string       `json:"tenant_id"`
	UserID   uuid.UUID    `json:"user_id"`
}

func (q *Queries) UpdateUserStatus(ctx context.Context, arg UpdateUserStatusParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserStatusStmt, updateUserStatus, arg.IsActive, arg.TenantID, arg.UserID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.TenantID,
		&i.UserName,
		&i.UserEmail,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.IsActive,
	)
	return i, err
}
