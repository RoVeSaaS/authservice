// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: groups.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (
group_id,
group_name,
tenant_id
) VALUES (
$1, $2, $3
) RETURNING group_id, group_name, tenant_id
`

type CreateGroupParams struct {
	GroupID   uuid.UUID      `json:"group_id"`
	GroupName sql.NullString `json:"group_name"`
	TenantID  sql.NullString `json:"tenant_id"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.queryRow(ctx, q.createGroupStmt, createGroup, arg.GroupID, arg.GroupName, arg.TenantID)
	var i Group
	err := row.Scan(&i.GroupID, &i.GroupName, &i.TenantID)
	return i, err
}

const deleteGroupById = `-- name: DeleteGroupById :exec
delete from groups 
where group_id = $1
`

func (q *Queries) DeleteGroupById(ctx context.Context, groupID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteGroupByIdStmt, deleteGroupById, groupID)
	return err
}

const getGroupById = `-- name: GetGroupById :one
select group_id, group_name, tenant_id from groups
where group_id = $1 LIMIT 1
`

func (q *Queries) GetGroupById(ctx context.Context, groupID uuid.UUID) (Group, error) {
	row := q.queryRow(ctx, q.getGroupByIdStmt, getGroupById, groupID)
	var i Group
	err := row.Scan(&i.GroupID, &i.GroupName, &i.TenantID)
	return i, err
}

const getGroups = `-- name: GetGroups :many
select group_id, group_name, tenant_id from groups
where
tenant_id = $3
order by group_id
LIMIT $1
OFFSET $2
`

type GetGroupsParams struct {
	Limit    int32          `json:"limit"`
	Offset   int32          `json:"offset"`
	TenantID sql.NullString `json:"tenant_id"`
}

func (q *Queries) GetGroups(ctx context.Context, arg GetGroupsParams) ([]Group, error) {
	rows, err := q.query(ctx, q.getGroupsStmt, getGroups, arg.Limit, arg.Offset, arg.TenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(&i.GroupID, &i.GroupName, &i.TenantID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
